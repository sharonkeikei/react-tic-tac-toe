{"version":3,"sources":["components/Square.js","components/Board.js","App.js","serviceWorker.js","index.js"],"names":["Square","props","className","onClick","onClickCallback","rowIndex","colIndex","value","Board","squareList","squares","allSquare","map","squareRow","rowIdx","eachSquare","colIdx","push","id","key","generateSquareComponents","generateSquares","currentId","row","col","App","blankBoard","useState","setSquares","currentPlayer","setCurrentPlayer","numOfSquareOccupied","setNumOfSquareOccupied","currentWinner","setCurrentWinner","status","setStatus","nextPlayer","checkForWinner","winningLines","squareArray","flat","i","length","a","b","c","newSquares","winner","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.96b47327.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\n\nimport './Square.css'\n\nconst Square = (props) => {\n  // For Wave 1 enable this \n  //  Component to alert a parent \n  //  component when it's clicked on.\n\n  return <button\n    className=\"square\"\n    onClick={() => props.onClickCallback(props.rowIndex, props.colIndex)}\n  >\n    {props.value}\n  </button>\n}\n\nSquare.propTypes = {\n  value: PropTypes.string.isRequired,\n  onClickCallback: PropTypes.func.isRequired,\n  id: PropTypes.number.isRequired,\n};\n\nexport default Square\n","import React from 'react';\nimport './Board.css';\nimport Square from './Square';\nimport PropTypes from 'prop-types';\n\n\nconst generateSquareComponents = (squares, onClickCallback) => {\n  // Complete this for Wave 1\n  let allSquare = [];\n  squares.map((squareRow, rowIdx) => {\n    squareRow.map((eachSquare, colIdx) => {\n      allSquare.push (\n        <Square\n          value={eachSquare.value}\n          id={eachSquare.id}\n          onClickCallback={onClickCallback}\n          key={eachSquare.id}\n          rowIndex={rowIdx}\n          colIndex={colIdx}\n        />\n        )\n      })\n    })\n    //console.log(allSquare);\n    return (allSquare)\n};\n\nconst Board = ({ squares, onClickCallback }) => {\n  const squareList = generateSquareComponents(squares, onClickCallback);\n  //console.log(squareList);\n  return <div className=\"grid\" >\n    {squareList}\n  </div>\n}\n\nBoard.propTypes = {\n  squares: PropTypes.arrayOf(\n    PropTypes.arrayOf(\n      PropTypes.shape({\n        id: PropTypes.number.isRequired,\n        value: PropTypes.string.isRequired\n      })\n    )\n  ),\n  onClickCallback: PropTypes.func.isRequired,\n};\n\nexport default Board;\n","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Board from './components/Board';\n//import Square from './components/Square';\n\nconst PLAYER_1 = 'X';\nconst PLAYER_2 = 'O';\n\nconst generateSquares = () => {\n  const squares = [];\n\n  let currentId = 0;\n\n  for (let row = 0; row < 3; row += 1) {\n    squares.push([]);\n    for (let col = 0; col < 3; col += 1) {\n      squares[row].push({\n        id: currentId,\n        value: '',\n      });\n      currentId += 1;\n    }\n  }\n  \n  return squares;\n}\n\n\nconst App = () => {\n\n  const blankBoard = generateSquares();\n  const [squares, setSquares] = useState(blankBoard); \n  const [currentPlayer, setCurrentPlayer] = useState(PLAYER_1); \n  const [numOfSquareOccupied, setNumOfSquareOccupied] = useState(1);\n  const [currentWinner, setCurrentWinner] = useState(null);\n  const [status, setStatus] = useState('Current player is X'); \n    \n  // Wave 2\n  // You will need to create a method to change the square \n  //   When it is clicked on.\n  //   Then pass it into the squares as a callback\n  const updateSquare = (rowIndex, colIndex) => {\n\n    const newSquares = [...squares];\n    // cease responding to clicks on the board if the game has a winner.\n    if (currentWinner) {\n      return;\n    }\n    \n    // find that square that's clicked and check whether it's already occupied \n    if (newSquares[rowIndex][colIndex].value === \"\") {\n      newSquares[rowIndex][colIndex].value = currentPlayer;\n      setNumOfSquareOccupied(numOfSquareOccupied + 1);\n    } else { \n      // if the square already is occupied, just return as it is.\n      return;\n    }\n    \n    //set the state of the board\n    setSquares(newSquares);\n    const winner = checkForWinner(newSquares);\n\n    if (winner) {\n      setStatus(`The winner is ${winner}`);\n      setCurrentWinner(winner);\n    } else if (numOfSquareOccupied === 9) {\n      setStatus('Tie game!');\n      setCurrentWinner(true);\n    } else {\n      nextPlayer();\n    }\n  } \n\n  const nextPlayer = () => {\n    if (currentPlayer === PLAYER_1){\n      setCurrentPlayer(PLAYER_2);\n      setStatus('Current player is O');\n    } else {\n      setCurrentPlayer(PLAYER_1);\n      setStatus('Current player is X');\n    }  \n  }\n\n  const checkForWinner = (squares) => {\n    // Complete in Wave 3\n    const winningLines = [\n      [0,1,2],\n      [3,4,5],\n      [6,7,8],\n      [0,3,6],\n      [1,4,7],\n      [2,5,8],\n      [0,4,8],\n      [2,4,6] \n    ];\n    const squareArray = squares.flat();\n    \n    for(let i = 0; i < winningLines.length; i ++) {\n      //destruction\n      const [a,b,c] = winningLines[i]\n      if (squareArray[a].value && squareArray[a].value === squareArray[b].value  && squareArray[b].value ===squareArray[c].value) {\n        return squareArray[a].value;        \n      } \n    }\n    return null;\n  }\n\n  const resetGame = () => {\n    // Complete in Wave 4\n    // resetting all the states in order to restart the game\n    setSquares(generateSquares());\n    setNumOfSquareOccupied(1);\n    setCurrentPlayer(PLAYER_1);\n    setCurrentWinner(null);\n    setStatus('Current player is X');\n  }\n  \n  \n  \n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>React Tic Tac Toe</h1>\n        <h2>{status}</h2>\n        <button onClick={resetGame}>Reset Game</button>\n      </header>\n      <main>\n        <Board squares={squares} onClickCallback={updateSquare} />\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}